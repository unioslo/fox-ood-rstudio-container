#!/usr/bin/env bash

# Purge the module environment to avoid conflicts
module reset

export PATH="$PATH:/usr/lib/rstudio-server/bin/"
export PROJDIR="/fp/projects01/<%= context.auto_accounts -%>"

<%- unless context.ec_modules.blank? -%>
# Load additional modules (optional)
module load <%= context.ec_modules %>
<%- end -%>

module list


#
# Start RStudio Server
#

# PAM auth helper used by RStudio
export RSTUDIO_AUTH="${PWD}/bin/auth"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="${PWD}/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="${PWD}/rsession.log"
  exec &>>"\${RSESSION_LOG_FILE}"

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

# Generate a database.conf file
export DBCONF="${PWD}/database.conf"
(
umask 077
sed 's/^ \{2\}//' > "${DBCONF}" << EOL
  # set database location
  provider=sqlite
  directory=$SCRATCH/rstudio-server/db
EOL
)
chmod 700 "${DBCONF}"

# Launch the RStudio Server
echo "Starting up rserver..."
set -x

apptainer run \
  --bind /projects,/localscratch,/fp/projects01/<%= context.auto_accounts %>,/cluster \
  <%- if not context.ec_gpus.blank? -%>
  --nv \
  <%- end -%>
  <%- if context.ec_image.blank? -%>
  /cluster/opt/OOD/fox-rstudio-4.3.2.sif \
  <%- else -%>
  <%= context.ec_image %> \
  <%- end -%>
  --www-port ${port} \
  --auth-none 0 \
  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 \
  --rsession-path "${RSESSION_WRAPPER_FILE}" \
  --secure-cookie-key-file "${SCRATCH}/rstudio-server/secure-cookie-key" \
  --database-config-file "${DBCONF}" \
  --server-data-dir "${SCRATCH}" \
  --server-user $(whoami) 2>&1
